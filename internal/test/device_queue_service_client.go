// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/brocaar/chirpstack-api/go/v3/as/external/api (interfaces: DeviceQueueServiceClient)

// Package test is a generated GoMock package.
package test

import (
	context "context"
	api "github.com/brocaar/chirpstack-api/go/v3/as/external/api"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

// MockDeviceQueueServiceClient is a mock of DeviceQueueServiceClient interface
type MockDeviceQueueServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceQueueServiceClientMockRecorder
}

// MockDeviceQueueServiceClientMockRecorder is the mock recorder for MockDeviceQueueServiceClient
type MockDeviceQueueServiceClientMockRecorder struct {
	mock *MockDeviceQueueServiceClient
}

// NewMockDeviceQueueServiceClient creates a new mock instance
func NewMockDeviceQueueServiceClient(ctrl *gomock.Controller) *MockDeviceQueueServiceClient {
	mock := &MockDeviceQueueServiceClient{ctrl: ctrl}
	mock.recorder = &MockDeviceQueueServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeviceQueueServiceClient) EXPECT() *MockDeviceQueueServiceClientMockRecorder {
	return m.recorder
}

// Enqueue mocks base method
func (m *MockDeviceQueueServiceClient) Enqueue(arg0 context.Context, arg1 *api.EnqueueDeviceQueueItemRequest, arg2 ...grpc.CallOption) (*api.EnqueueDeviceQueueItemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Enqueue", varargs...)
	ret0, _ := ret[0].(*api.EnqueueDeviceQueueItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enqueue indicates an expected call of Enqueue
func (mr *MockDeviceQueueServiceClientMockRecorder) Enqueue(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockDeviceQueueServiceClient)(nil).Enqueue), varargs...)
}

// Flush mocks base method
func (m *MockDeviceQueueServiceClient) Flush(arg0 context.Context, arg1 *api.FlushDeviceQueueRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Flush", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Flush indicates an expected call of Flush
func (mr *MockDeviceQueueServiceClientMockRecorder) Flush(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockDeviceQueueServiceClient)(nil).Flush), varargs...)
}

// List mocks base method
func (m *MockDeviceQueueServiceClient) List(arg0 context.Context, arg1 *api.ListDeviceQueueItemsRequest, arg2 ...grpc.CallOption) (*api.ListDeviceQueueItemsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*api.ListDeviceQueueItemsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockDeviceQueueServiceClientMockRecorder) List(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDeviceQueueServiceClient)(nil).List), varargs...)
}
